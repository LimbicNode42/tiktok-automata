{
  "url": "https://justinjackson.ca/ai-coding?utm_source=tldrai",
  "title": "AI is actually good for coding",
  "original_content": "Changed my mind: AI is actually good for coding I'll be honest: I've been skeptical of AI development tools. Not because I'm anti-progress, but because the demos often feel over-hyped. Too many 'AI will replace developers' takes, too many one-shot coding videos that felt more like magic tricks than practical tools. But this conversation with Adam Wathan (creator of Tailwind CSS ) and Brian Casel ( Instrumental.dev ) changed my mind: Here are a few thoughts that stood out to me: 90% of programming is grunt work \"There's so much of programming that's not actually programming,\" Adam commented, \"90% of it is just grunt work. AI is good at that part.\" This isn't about replacing creativity but eliminating the tedious stuff that never added value anyway. Experience matters more than ever Adam and Brian agree that AI is terrible when you don't know what you're doing, but incredible when you're an expert. \"I've tried to use it with things I don't know how to do, and it's a fucking disaster,\" Adam said, \"you instantly fall into that trap of AI being confidently wrong, but you can't tell because you don't know how to do it yourself.\" This flips the narrative. Instead of \"AI will replace experienced developers,\" it's more like \"AI makes experienced developers superhuman.\" This brings up a good question, posed by Dave Giunta in the YouTube chat: \u200b\u200bHow do you train junior people to learn these skills if they don't get practice doing the easy \"gruntwork\" things? The business implications are real (and scary) Adam got vulnerable about how AI is affecting the Tailwind Plus business. People want LLM.txt versions of their docs, but their business depends on traffic to the website where people notice their products. \"If everyone is just looking at a markdown file with no ability for us to advertise, we have no distribution anymore.\" Thoughts/questions First, we're all figuring this out in real time. Our industry's tectonic plates are shifting, and nobody has the playbook yet. Second, maybe the answer isn't to fight the tide, but to figure out how to use these tools to be more ambitious about what we build. Brian mentioned he's building more complex features than he would have attempted before. Third, I'm wondering what the repercussions of all this will be on Junior devs. Cheers, Justin Jackson PS: This video is just one of the segments from today's episode of The Panel podcast. Listen to the whole thing ! Connect with me on: \ud83e\udd8b Bluesky \ud83d\udcbc",
  "tiktok_summary": "The tech world just had its biggest plot twist yet: the notion that AI might actually make coding easier, not harder. For years, we've seen demos of AI-powered coding tools that promised to revolutionize the way we write code, but these \"magic\" solutions rarely delivered. The hype was always there, but the substance was lacking. Until now. According to the creators of popular frameworks like Tailwind CSS and Instrumental.dev, Adam Wathan and Brian Casel, the reality is far more nuanced. They claim that 90% of programming is grunt work - tasks that can be automated by AI. And they're right. There's a lot of repetitive, non-creative labor involved in coding that doesn't add value to our projects. But here's the thing: AI is great when you already know your stuff. When you're an expert, AI becomes an indispensable tool, freeing up your time to focus on the creative aspects of coding. According to the CEO of Instrumental.dev, \"I've tried using AI with things I don't know how to do, and it's a complete disaster.\" That got us thinking: what exactly does this mean for aspiring coders and seasoned devs alike? Wait, what if we could automate the boring parts of coding? That's exactly what AI can do. For instance, did you know that some companies use AI-powered tools to review code and catch errors before it even reaches production? Talk about efficiency! Here's where things get really spicy: the lines between human and machine coding are blurring. No longer is the \" coder vs. AI\" debate a zero-sum game. Instead, it's about augmenting our abilities with the right tools.",
  "summary_length": 1586,
  "summary_words": 269,
  "summarized_at": "2025-06-28T00:56:44.434833"
}